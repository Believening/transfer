type Node struct {
    zero *Node
    one  *Node
}

func findMaximumXOR(nums []int) int {
    var root Node
    var max int
    for _, n := range nums {        
        addNumber(&root, n)       
        
        potential := 1<<31-1
        node := &root
        for bit := 1<<30; bit >= 1; bit >>= 1 {
            if n&bit == 0 {
                if node.one != nil {
                    // there is a number with opposite bit, use it
                    node = node.one
                } else {
                    // there's only a number with same bit, remove this bit from potential
                    potential &^= bit
                    node = node.zero
                }
            } else {
                if node.zero != nil {
                    // there is a number with opposite bit, use it
                    node = node.zero
                } else {
                    // there's only a number with same bit, remove this bit from potential
                    potential &^= bit
                    node = node.one
                }
            }
            if potential <= max {
                break
            }
        }
        if potential > max {
            max = potential
        }
    }
    return max
}

func addNumber(root *Node, n int) {
    node := root
    for bit := 1<<30; bit >= 1; bit >>= 1 {
        if n&bit == 0 {
            if node.zero == nil {
                node.zero = new(Node)
            }
            node = node.zero
        } else {
            if node.one == nil {
                node.one = new(Node)
            }
            node = node.one
        }
    }    
}

//type node struct {
//	c [2]*node
//}
//
//type trie struct {
//	root *node
//}
//
//func newTrie() *trie {
//	return &trie{
//		root: &node{},
//	}
//}
//
//func (t *trie) insert(num int) {
//	cur := t.root
//	for i := 31; i >= 0; i-- {
//		b := (num >> uint(i)) & 1
//		if cur.c[b] == nil {
//			cur.c[b] = new(node)
//		}
//		cur = cur.c[b]
//	}
//}
//
//func findMaximumXOR(nums []int) int {
//	t := newTrie()
//	for idx := range nums {
//		t.insert(nums[idx])
//	}
//	max := -1
//	for _, v := range nums {
//		cur, sum := t.root, 0
//		for i := 31; i >= 0; i-- {
//			b := (v >> uint(i)) & 1
//			if cur.c[(b+1)%2] != nil {
//				sum += 1 << uint(i)
//				cur = cur.c[(b+1)%2]
//			} else if cur.c[b] != nil {
//				cur = cur.c[b]
//			} else {
//				break
//			}
//		}
//		if max < sum {
//			max = sum
//		}
//	}
//	return max
//}
